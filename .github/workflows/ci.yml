name: CI

on: [push, pull_request]

jobs:
  lint:
    # Run for PRs only if they come from a forked repo (avoids duplicate runs)
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check for tab characters
        run: "! grep -P -R '\\t' src/ tests/*.cpp"

  build:
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          cmake -B build
          cd build
          make -j3
          make install
      - name: Run
        run: tests/run.sh

  compare:
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cat tests/baseline-commit.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.baseline_commit }}
          path: baseline
      - name: Build baseline version
        run: |
          cd baseline
          cmake -B build
          make -j3 -C build
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get install samtools python3-pysam picard-tools
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install samtools pysam picard-tools
      - name: Cache test dataset
        uses: actions/cache@v3
        with:
          key: test-data-${{ hashFiles('tests/download.sh') }}
          path: tests/drosophila/
      - name: Download test dataset
        run: tests/download.sh
      - name: Generate baseline BAM
        run: |
          baseline/build/strobealign tests/drosophila/ref.fasta tests/drosophila/reads.1.fastq.gz tests/drosophila/reads.2.fastq.gz | samtools view -o baseline.bam
      - name: Build HEAD version
        run: |
          cmake -B build
          make -j3 -C build
      - name: Generate HEAD BAM
        run: build/strobealign tests/drosophila/ref.fasta tests/drosophila/reads.1.fastq.gz tests/drosophila/reads.2.fastq.gz | samtools view -o head.bam
      - name: Compare
        run: python3 tests/samdiff.py baseline.bam head.bam
      - name: Validate with Picard
        run: |
          PicardCommandLine ValidateSamFile IGNORE=RECORD_MISSING_READ_GROUP IGNORE=MISSING_READ_GROUP IGNORE=INVALID_ALIGNMENT_START I=head.bam
